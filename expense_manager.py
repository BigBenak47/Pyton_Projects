# -*- coding: utf-8 -*-
"""Expense_Manager.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zpxtZ1w2qpulp5YgkhYoyyX_kHvmtmEU
"""

import sqlite3

# Function to create the database table
def create_table():
    conn = sqlite3.connect("expense_manager.db")
    cursor = conn.cursor()
    cursor.execute(
        """
        CREATE TABLE IF NOT EXISTS expenses (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            category TEXT,
            amount REAL,
            date TEXT
        )
        """
    )
    conn.commit()
    conn.close()

# Function to add an expense
def add_expense(category, amount, date):
    conn = sqlite3.connect("expense_manager.db")
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO expenses (category, amount, date) VALUES (?, ?, ?)",
        (category, amount, date),
    )
    conn.commit()
    conn.close()

# Function to view all expenses
def view_expenses():
    conn = sqlite3.connect("expense_manager.db")
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM expenses")
    expenses = cursor.fetchall()
    conn.close()
    return expenses

# Function to view expenses by category
def view_expenses_by_category(category):
    conn = sqlite3.connect("expense_manager.db")
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM expenses WHERE category=?", (category,))
    expenses = cursor.fetchall()
    conn.close()
    return expenses

# Function to calculate total expenses
def calculate_total_expenses():
    conn = sqlite3.connect("expense_manager.db")
    cursor = conn.cursor()
    cursor.execute("SELECT SUM(amount) FROM expenses")
    total_expenses = cursor.fetchone()[0]
    conn.close()
    return total_expenses


if __name__ == "__main__":
    # Create the expenses table if it doesn't exist
    create_table()

    while True:
        print("Expense Manager Application")
        print("1. Add Expense")
        print("2. View All Expenses")
        print("3. View Expenses by Category")
        print("4. Calculate Total Expenses")
        print("X. Exit")

        choice = int(input("Enter your choice: "))

        if choice == 1:
            category = input("Enter the expense category: ")
            amount = float(input("Enter the expense amount: "))
            date = input("Enter the date (YYYY-MM-DD): ")
            add_expense(category, amount, date)
            print("Expense added successfully!")

        elif choice == 2:
            expenses = view_expenses()
            if expenses:
                print("ID | Category | Amount | Date")
                for expense in expenses:
                    print(
                        f"{expense[0]} | {expense[1]} | {expense[2]} | {expense[3]}"
                    )
            else:
                print("No expenses found.")

        elif choice == 3:
            category = input("Enter the category to filter expenses: ")
            expenses = view_expenses_by_category(category)
            if expenses:
                print("ID | Category | Amount | Date")
                for expense in expenses:
                    print(
                        f"{expense[0]} | {expense[1]} | {expense[2]} | {expense[3]}"
                    )
            else:
                print(f"No expenses found for category: {category}")

        elif choice == 4:
            total_expenses = calculate_total_expenses()
            print(f"Total Expenses: {total_expenses}")

        elif choice == X:
            print("Exiting Expense Manager Application.")
            break

        else:
            print("Invalid choice. Please try again.")